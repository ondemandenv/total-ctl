{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport * as fs from 'fs';\n\n// Optional: use @actions/core when available for better DX; fall back otherwise.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet core: any | undefined;\ntry {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    core = require('@actions/core');\n} catch (_e) {\n    core = undefined;\n}\n\n//<editor-fold desc=\"SECTION: Type Definitions\">\n\n/**\n * Defines the inputs for the GitHub Action.\n */\ninterface Inputs {\n    branch: string;\n}\n\n/**\n * Represents the configuration for a given environment (e.g., Production, Development).\n */\ninterface EnvironmentConfig {\n    env: string;\n    region: string;\n    roleArn: string;\n}\n\n/**\n * Represents the final, resolved configuration that will be output by the action.\n */\ninterface ResolvedConfig {\n    env: string;\n    accountId: string;\n    region: string;\n    roleArn: string;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"SECTION: GitHub Actions Toolkit Wrappers\">\n\n/**\n * Reads an environment variable and returns its boolean representation.\n * @param name The name of the environment variable.\n * @param fallback The default value if the variable is not set.\n * @returns The boolean value.\n */\nfunction getBooleanEnv(name: string, fallback = false): boolean {\n    const v = process.env[name];\n    if (v == null) return fallback;\n    return v.toLowerCase() === 'true' || v === '1';\n}\n\n/**\n * Sets an output parameter for the GitHub Action.\n * @param name The name of the output parameter.\n * @param value The value to set.\n */\nfunction setOutput(name: string, value: string) {\n    if (core?.setOutput) {\n        core.setOutput(name, value);\n        return;\n    }\n    // Fallback for local execution, requires GITHUB_OUTPUT env var to be set\n    if (process.env['GITHUB_OUTPUT']) {\n        fs.appendFileSync(process.env['GITHUB_OUTPUT'], `${name}=${value}\n`);\n    }\n}\n\n/**\n * Exports an environment variable for subsequent steps in the GitHub Actions job.\n * @param name The name of the environment variable.\n * @param value The value to set.\n */\nfunction exportEnv(name: string, value: string) {\n    if (core?.exportVariable) {\n        core.exportVariable(name, value);\n        return;\n    }\n    // Fallback for local execution, requires GITHUB_ENV env var to be set\n    if (process.env['GITHUB_ENV']) {\n        fs.appendFileSync(process.env['GITHUB_ENV'], `${name}=${value}\n`);\n    }\n}\n\n/**\n * Logs a debug message, respecting the runner's debug settings.\n * @param message The message to log.\n */\nfunction logDebug(message: string) {\n    if (core?.debug) {\n        core.debug(message);\n        return;\n    }\n    if (getBooleanEnv('RUNNER_DEBUG')) {\n        // Standard format for debug messages in GitHub Actions\n        console.log(`::debug::${message}`);\n    }\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"SECTION: Input and Configuration Parsing\">\n\n/**\n * Retrieves and validates the inputs for the action.\n * @returns An object containing all the action inputs.\n */\nfunction getInputs(): Inputs {\n    if (core) {\n        return {\n            branch: core.getInput('branch', {required: true}),\n        };\n    }\n\n    const input = (name: string, def?: string): string => {\n        const v = process.env[`INPUT_${name.toUpperCase()}`];\n        if (v == null || v === '') {\n            if (def !== undefined) return def;\n            throw new Error(`Missing required input: ${name}`);\n        }\n        return v;\n    };\n\n    return {\n        branch: input('branch'),\n    };\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"SECTION: Core Logic\">\n\n/**\n * Parses an AWS Account ID from a full IAM ARN string.\n * @param arn The IAM ARN to parse.\n * @returns The extracted 12-digit AWS Account ID, or undefined if parsing fails.\n */\nfunction getAccountIdFromArn(arn: string): string | undefined {\n    const match = arn.match(/::(\\d{12}):/);\n    return match?.[1];\n}\n\n/**\n * Sanitizes a git branch name to create a valid environment name.\n * Replaces slashes and other non-alphanumeric characters with hyphens,\n * converts to lowercase, and truncates to a reasonable length.\n * @param branch The raw git branch name.\n * @returns A sanitized string suitable for use as an environment name.\n */\nfunction sanitizeBranchName(branch: string): string {\n    const sanitized = branch\n        .toLowerCase()\n        .replace(/[^a-z0-9-]/g, '-') // Replace non-alphanumeric chars (except hyphen) with hyphen\n        .replace(/--+/g, '-')       // Collapse consecutive hyphens\n        .replace(/^-+|-+$/g, '');   // Trim leading/trailing hyphens\n\n    // Truncate to a reasonable length for environment names\n    return sanitized.substring(0, 50);\n}\n\n/**\n * Resolves the final configuration based on the current branch and a hardcoded mapping.\n * This uses a feature-branch workflow: `main` maps to production, and all other\n * branches (e.g., `feature/*`, `bugfix/*`) map to a dynamic environment that uses\n * the development infrastructure but gets a unique name derived from the branch.\n *\n * @param branch The current git branch name.\n * @returns The resolved configuration.\n */\nfunction resolveConfig(branch: string): ResolvedConfig {\n    // --- Hardcoded Configuration ---\n    // TODO: Update these values to match your AWS environments.\n\n    // This configuration points to your stable, production AWS account.\n    const productionConfig: EnvironmentConfig = {\n        env: 'customer-facing', // The static name for the primary production environment\n        region: 'us-east-1',\n        roleArn: 'arn:aws:iam::111111111111:role/github-actions-deploy-role' // Production Role ARN\n    };\n\n    // This configuration points to your sandbox/development AWS account.\n    const developmentConfig: EnvironmentConfig = {\n        env: 'default-dev', // This default name is overridden for dynamic environments\n        region: 'us-west-2',\n        roleArn: 'arn:aws:iam::682794873457:role/total-ctl-infra-example-GithubActionsDeployRole3AEB-59VstfyutSjB' // Development/Sandbox Role ARN\n    };\n    // --- End of Hardcoded Configuration ---\n\n    let config: EnvironmentConfig;\n    let envName: string;\n\n    if (branch === 'main') {\n        logDebug(`Branch 'main' maps to the static production environment.`);\n        config = productionConfig;\n        envName = productionConfig.env; // Use the static name, e.g., 'customer-facing'\n\n    } else if (branch.startsWith('prod/') || branch.startsWith('hotfix/')) {\n        logDebug(`Branch '${branch}' matches a production prefix. Creating a DYNAMIC environment in the PRODUCTION account.`);\n        config = productionConfig; // Target the Production Account\n        envName = sanitizeBranchName(branch); // But use a dynamic name\n\n    } else {\n        logDebug(`Branch '${branch}' is a standard feature branch. Creating a DYNAMIC environment in the DEVELOPMENT account.`);\n        config = developmentConfig; // Target the Development Account\n        envName = sanitizeBranchName(branch); // With a dynamic name\n    }\n\n    const accountId = getAccountIdFromArn(config.roleArn);\n    if (!accountId) {\n        throw new Error(`Could not parse Account ID from Role ARN: ${config.roleArn}`);\n    }\n\n    return {\n        env: envName, // The final static or dynamic environment name\n        accountId: accountId,\n        region: config.region,\n        roleArn: config.roleArn,\n    };\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"SECTION: Main Execution\">\n\n/**\n * Main function for the GitHub Action.\n * It orchestrates the process of getting inputs, resolving the configuration,\n * and setting the outputs and environment variables.\n */\nfunction main() {\n    try {\n        // Allows attaching a debugger locally by setting the ACTION_BREAK env var.\n        if (process.env.ACTION_BREAK === '1') {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n\n        const inputs = getInputs();\n        logDebug(`Input: branch=${inputs.branch}`);\n\n        const resolved = resolveConfig(inputs.branch);\n\n        logDebug(`Resolved: env=${resolved.env}, account_id=${resolved.accountId}, region=${resolved.region}, role_arn=${resolved.roleArn}`);\n\n        // Set action outputs for use in other steps\n        setOutput('env', resolved.env);\n        setOutput('account_id', resolved.accountId);\n        setOutput('region', resolved.region);\n        setOutput('role_arn', resolved.roleArn);\n\n        // Export environment variables for use in subsequent scripts\n        exportEnv('ENVIRONMENT', resolved.env);\n        exportEnv('AWS_ACCOUNT_ID', resolved.accountId);\n        exportEnv('AWS_REGION', resolved.region);\n        exportEnv('AWS_ROLE_ARN', resolved.roleArn);\n\n    } catch (err) {\n        const message = err instanceof Error ? err.message : String(err);\n        if (core?.setFailed) {\n            core.setFailed(message);\n        } else {\n            console.error(message);\n        }\n        process.exit(1);\n    }\n}\n\nmain();\n\n//</editor-fold>\n"]}